// generated by ../../sqlpp11/scripts/ddl2cpp /Users/phmag/Documents/dbTest/dbSaveTest/sqlpp11/dump.sql /Users/phmag/Documents/dbTest/dbSaveTest/sqlpp11/TestTable testtable
#ifndef TESTTABLE_TESTTABLE_H
#define TESTTABLE_TESTTABLE_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace testtable
{
  namespace CONDITIONS_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct CameraGain
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "camera_gain";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cameraGain;
            T& operator()() { return cameraGain; }
            const T& operator()() const { return cameraGain; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
    struct Humidity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "humidity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T humidity;
            T& operator()() { return humidity; }
            const T& operator()() const { return humidity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
    struct Temperature
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "temperature";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T temperature;
            T& operator()() { return temperature; }
            const T& operator()() const { return temperature; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
  } // namespace CONDITIONS_

  struct CONDITIONS: sqlpp::table_t<CONDITIONS,
               CONDITIONS_::Id,
               CONDITIONS_::T,
               CONDITIONS_::CameraGain,
               CONDITIONS_::Humidity,
               CONDITIONS_::Temperature>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "CONDITIONS";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T CONDITIONS;
        T& operator()() { return CONDITIONS; }
        const T& operator()() const { return CONDITIONS; }
      };
    };
  };
  namespace CSVDAMACTIVITY_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Date
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "date";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T date;
            T& operator()() { return date; }
            const T& operator()() const { return date; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
    };
    struct Time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
    };
    struct DUMMYFIELD0
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "DUMMY_FIELD_0";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DUMMYFIELD0;
            T& operator()() { return DUMMYFIELD0; }
            const T& operator()() const { return DUMMYFIELD0; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct DUMMYFIELD1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "DUMMY_FIELD_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DUMMYFIELD1;
            T& operator()() { return DUMMYFIELD1; }
            const T& operator()() const { return DUMMYFIELD1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct DUMMYFIELD2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "DUMMY_FIELD_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DUMMYFIELD2;
            T& operator()() { return DUMMYFIELD2; }
            const T& operator()() const { return DUMMYFIELD2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct DUMMYFIELD3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "DUMMY_FIELD_3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DUMMYFIELD3;
            T& operator()() { return DUMMYFIELD3; }
            const T& operator()() const { return DUMMYFIELD3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct DUMMYFIELD4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "DUMMY_FIELD_4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DUMMYFIELD4;
            T& operator()() { return DUMMYFIELD4; }
            const T& operator()() const { return DUMMYFIELD4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct DUMMYFIELD5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "DUMMY_FIELD_5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DUMMYFIELD5;
            T& operator()() { return DUMMYFIELD5; }
            const T& operator()() const { return DUMMYFIELD5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct DUMMYFIELD6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "DUMMY_FIELD_6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DUMMYFIELD6;
            T& operator()() { return DUMMYFIELD6; }
            const T& operator()() const { return DUMMYFIELD6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI1;
            T& operator()() { return ROI1; }
            const T& operator()() const { return ROI1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI2;
            T& operator()() { return ROI2; }
            const T& operator()() const { return ROI2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI3;
            T& operator()() { return ROI3; }
            const T& operator()() const { return ROI3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI4;
            T& operator()() { return ROI4; }
            const T& operator()() const { return ROI4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI5;
            T& operator()() { return ROI5; }
            const T& operator()() const { return ROI5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI6;
            T& operator()() { return ROI6; }
            const T& operator()() const { return ROI6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI7;
            T& operator()() { return ROI7; }
            const T& operator()() const { return ROI7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI8;
            T& operator()() { return ROI8; }
            const T& operator()() const { return ROI8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI9
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_9";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI9;
            T& operator()() { return ROI9; }
            const T& operator()() const { return ROI9; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI10
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_10";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI10;
            T& operator()() { return ROI10; }
            const T& operator()() const { return ROI10; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI11
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_11";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI11;
            T& operator()() { return ROI11; }
            const T& operator()() const { return ROI11; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI12
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_12";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI12;
            T& operator()() { return ROI12; }
            const T& operator()() const { return ROI12; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI13
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_13";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI13;
            T& operator()() { return ROI13; }
            const T& operator()() const { return ROI13; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI14
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_14";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI14;
            T& operator()() { return ROI14; }
            const T& operator()() const { return ROI14; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI15
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_15";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI15;
            T& operator()() { return ROI15; }
            const T& operator()() const { return ROI15; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI16
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_16";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI16;
            T& operator()() { return ROI16; }
            const T& operator()() const { return ROI16; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI17
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_17";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI17;
            T& operator()() { return ROI17; }
            const T& operator()() const { return ROI17; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI18
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_18";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI18;
            T& operator()() { return ROI18; }
            const T& operator()() const { return ROI18; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI19
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_19";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI19;
            T& operator()() { return ROI19; }
            const T& operator()() const { return ROI19; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct ROI20
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ROI_20";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ROI20;
            T& operator()() { return ROI20; }
            const T& operator()() const { return ROI20; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace CSVDAMACTIVITY_

  struct CSVDAMACTIVITY: sqlpp::table_t<CSVDAMACTIVITY,
               CSVDAMACTIVITY_::Id,
               CSVDAMACTIVITY_::Date,
               CSVDAMACTIVITY_::Time,
               CSVDAMACTIVITY_::DUMMYFIELD0,
               CSVDAMACTIVITY_::DUMMYFIELD1,
               CSVDAMACTIVITY_::DUMMYFIELD2,
               CSVDAMACTIVITY_::DUMMYFIELD3,
               CSVDAMACTIVITY_::DUMMYFIELD4,
               CSVDAMACTIVITY_::DUMMYFIELD5,
               CSVDAMACTIVITY_::DUMMYFIELD6,
               CSVDAMACTIVITY_::ROI1,
               CSVDAMACTIVITY_::ROI2,
               CSVDAMACTIVITY_::ROI3,
               CSVDAMACTIVITY_::ROI4,
               CSVDAMACTIVITY_::ROI5,
               CSVDAMACTIVITY_::ROI6,
               CSVDAMACTIVITY_::ROI7,
               CSVDAMACTIVITY_::ROI8,
               CSVDAMACTIVITY_::ROI9,
               CSVDAMACTIVITY_::ROI10,
               CSVDAMACTIVITY_::ROI11,
               CSVDAMACTIVITY_::ROI12,
               CSVDAMACTIVITY_::ROI13,
               CSVDAMACTIVITY_::ROI14,
               CSVDAMACTIVITY_::ROI15,
               CSVDAMACTIVITY_::ROI16,
               CSVDAMACTIVITY_::ROI17,
               CSVDAMACTIVITY_::ROI18,
               CSVDAMACTIVITY_::ROI19,
               CSVDAMACTIVITY_::ROI20>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "CSV_DAM_ACTIVITY";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T CSVDAMACTIVITY;
        T& operator()() { return CSVDAMACTIVITY; }
        const T& operator()() const { return CSVDAMACTIVITY; }
      };
    };
  };
  namespace METADATA_
  {
    struct Field
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "field";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T field;
            T& operator()() { return field; }
            const T& operator()() const { return field; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
    };
    struct Value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace METADATA_

  struct METADATA: sqlpp::table_t<METADATA,
               METADATA_::Field,
               METADATA_::Value>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "METADATA";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T METADATA;
        T& operator()() { return METADATA; }
        const T& operator()() const { return METADATA; }
      };
    };
  };
  namespace ROI1_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI1_

  struct ROI1: sqlpp::table_t<ROI1,
               ROI1_::Id,
               ROI1_::T,
               ROI1_::X,
               ROI1_::Y,
               ROI1_::W,
               ROI1_::H,
               ROI1_::Phi,
               ROI1_::XyDistLog10x1000,
               ROI1_::IsInferred,
               ROI1_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_1";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI1;
        T& operator()() { return ROI1; }
        const T& operator()() const { return ROI1; }
      };
    };
  };
  namespace ROI10_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI10_

  struct ROI10: sqlpp::table_t<ROI10,
               ROI10_::Id,
               ROI10_::T,
               ROI10_::X,
               ROI10_::Y,
               ROI10_::W,
               ROI10_::H,
               ROI10_::Phi,
               ROI10_::XyDistLog10x1000,
               ROI10_::IsInferred,
               ROI10_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_10";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI10;
        T& operator()() { return ROI10; }
        const T& operator()() const { return ROI10; }
      };
    };
  };
  namespace ROI11_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI11_

  struct ROI11: sqlpp::table_t<ROI11,
               ROI11_::Id,
               ROI11_::T,
               ROI11_::X,
               ROI11_::Y,
               ROI11_::W,
               ROI11_::H,
               ROI11_::Phi,
               ROI11_::XyDistLog10x1000,
               ROI11_::IsInferred,
               ROI11_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_11";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI11;
        T& operator()() { return ROI11; }
        const T& operator()() const { return ROI11; }
      };
    };
  };
  namespace ROI12_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI12_

  struct ROI12: sqlpp::table_t<ROI12,
               ROI12_::Id,
               ROI12_::T,
               ROI12_::X,
               ROI12_::Y,
               ROI12_::W,
               ROI12_::H,
               ROI12_::Phi,
               ROI12_::XyDistLog10x1000,
               ROI12_::IsInferred,
               ROI12_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_12";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI12;
        T& operator()() { return ROI12; }
        const T& operator()() const { return ROI12; }
      };
    };
  };
  namespace ROI13_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI13_

  struct ROI13: sqlpp::table_t<ROI13,
               ROI13_::Id,
               ROI13_::T,
               ROI13_::X,
               ROI13_::Y,
               ROI13_::W,
               ROI13_::H,
               ROI13_::Phi,
               ROI13_::XyDistLog10x1000,
               ROI13_::IsInferred,
               ROI13_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_13";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI13;
        T& operator()() { return ROI13; }
        const T& operator()() const { return ROI13; }
      };
    };
  };
  namespace ROI14_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI14_

  struct ROI14: sqlpp::table_t<ROI14,
               ROI14_::Id,
               ROI14_::T,
               ROI14_::X,
               ROI14_::Y,
               ROI14_::W,
               ROI14_::H,
               ROI14_::Phi,
               ROI14_::XyDistLog10x1000,
               ROI14_::IsInferred,
               ROI14_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_14";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI14;
        T& operator()() { return ROI14; }
        const T& operator()() const { return ROI14; }
      };
    };
  };
  namespace ROI15_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI15_

  struct ROI15: sqlpp::table_t<ROI15,
               ROI15_::Id,
               ROI15_::T,
               ROI15_::X,
               ROI15_::Y,
               ROI15_::W,
               ROI15_::H,
               ROI15_::Phi,
               ROI15_::XyDistLog10x1000,
               ROI15_::IsInferred,
               ROI15_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_15";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI15;
        T& operator()() { return ROI15; }
        const T& operator()() const { return ROI15; }
      };
    };
  };
  namespace ROI16_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI16_

  struct ROI16: sqlpp::table_t<ROI16,
               ROI16_::Id,
               ROI16_::T,
               ROI16_::X,
               ROI16_::Y,
               ROI16_::W,
               ROI16_::H,
               ROI16_::Phi,
               ROI16_::XyDistLog10x1000,
               ROI16_::IsInferred,
               ROI16_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_16";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI16;
        T& operator()() { return ROI16; }
        const T& operator()() const { return ROI16; }
      };
    };
  };
  namespace ROI17_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI17_

  struct ROI17: sqlpp::table_t<ROI17,
               ROI17_::Id,
               ROI17_::T,
               ROI17_::X,
               ROI17_::Y,
               ROI17_::W,
               ROI17_::H,
               ROI17_::Phi,
               ROI17_::XyDistLog10x1000,
               ROI17_::IsInferred,
               ROI17_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_17";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI17;
        T& operator()() { return ROI17; }
        const T& operator()() const { return ROI17; }
      };
    };
  };
  namespace ROI18_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI18_

  struct ROI18: sqlpp::table_t<ROI18,
               ROI18_::Id,
               ROI18_::T,
               ROI18_::X,
               ROI18_::Y,
               ROI18_::W,
               ROI18_::H,
               ROI18_::Phi,
               ROI18_::XyDistLog10x1000,
               ROI18_::IsInferred,
               ROI18_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_18";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI18;
        T& operator()() { return ROI18; }
        const T& operator()() const { return ROI18; }
      };
    };
  };
  namespace ROI19_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI19_

  struct ROI19: sqlpp::table_t<ROI19,
               ROI19_::Id,
               ROI19_::T,
               ROI19_::X,
               ROI19_::Y,
               ROI19_::W,
               ROI19_::H,
               ROI19_::Phi,
               ROI19_::XyDistLog10x1000,
               ROI19_::IsInferred,
               ROI19_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_19";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI19;
        T& operator()() { return ROI19; }
        const T& operator()() const { return ROI19; }
      };
    };
  };
  namespace ROI2_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI2_

  struct ROI2: sqlpp::table_t<ROI2,
               ROI2_::Id,
               ROI2_::T,
               ROI2_::X,
               ROI2_::Y,
               ROI2_::W,
               ROI2_::H,
               ROI2_::Phi,
               ROI2_::XyDistLog10x1000,
               ROI2_::IsInferred,
               ROI2_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_2";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI2;
        T& operator()() { return ROI2; }
        const T& operator()() const { return ROI2; }
      };
    };
  };
  namespace ROI20_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI20_

  struct ROI20: sqlpp::table_t<ROI20,
               ROI20_::Id,
               ROI20_::T,
               ROI20_::X,
               ROI20_::Y,
               ROI20_::W,
               ROI20_::H,
               ROI20_::Phi,
               ROI20_::XyDistLog10x1000,
               ROI20_::IsInferred,
               ROI20_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_20";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI20;
        T& operator()() { return ROI20; }
        const T& operator()() const { return ROI20; }
      };
    };
  };
  namespace ROI3_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI3_

  struct ROI3: sqlpp::table_t<ROI3,
               ROI3_::Id,
               ROI3_::T,
               ROI3_::X,
               ROI3_::Y,
               ROI3_::W,
               ROI3_::H,
               ROI3_::Phi,
               ROI3_::XyDistLog10x1000,
               ROI3_::IsInferred,
               ROI3_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_3";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI3;
        T& operator()() { return ROI3; }
        const T& operator()() const { return ROI3; }
      };
    };
  };
  namespace ROI4_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI4_

  struct ROI4: sqlpp::table_t<ROI4,
               ROI4_::Id,
               ROI4_::T,
               ROI4_::X,
               ROI4_::Y,
               ROI4_::W,
               ROI4_::H,
               ROI4_::Phi,
               ROI4_::XyDistLog10x1000,
               ROI4_::IsInferred,
               ROI4_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_4";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI4;
        T& operator()() { return ROI4; }
        const T& operator()() const { return ROI4; }
      };
    };
  };
  namespace ROI5_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI5_

  struct ROI5: sqlpp::table_t<ROI5,
               ROI5_::Id,
               ROI5_::T,
               ROI5_::X,
               ROI5_::Y,
               ROI5_::W,
               ROI5_::H,
               ROI5_::Phi,
               ROI5_::XyDistLog10x1000,
               ROI5_::IsInferred,
               ROI5_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_5";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI5;
        T& operator()() { return ROI5; }
        const T& operator()() const { return ROI5; }
      };
    };
  };
  namespace ROI6_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI6_

  struct ROI6: sqlpp::table_t<ROI6,
               ROI6_::Id,
               ROI6_::T,
               ROI6_::X,
               ROI6_::Y,
               ROI6_::W,
               ROI6_::H,
               ROI6_::Phi,
               ROI6_::XyDistLog10x1000,
               ROI6_::IsInferred,
               ROI6_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_6";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI6;
        T& operator()() { return ROI6; }
        const T& operator()() const { return ROI6; }
      };
    };
  };
  namespace ROI7_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI7_

  struct ROI7: sqlpp::table_t<ROI7,
               ROI7_::Id,
               ROI7_::T,
               ROI7_::X,
               ROI7_::Y,
               ROI7_::W,
               ROI7_::H,
               ROI7_::Phi,
               ROI7_::XyDistLog10x1000,
               ROI7_::IsInferred,
               ROI7_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_7";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI7;
        T& operator()() { return ROI7; }
        const T& operator()() const { return ROI7; }
      };
    };
  };
  namespace ROI8_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI8_

  struct ROI8: sqlpp::table_t<ROI8,
               ROI8_::Id,
               ROI8_::T,
               ROI8_::X,
               ROI8_::Y,
               ROI8_::W,
               ROI8_::H,
               ROI8_::Phi,
               ROI8_::XyDistLog10x1000,
               ROI8_::IsInferred,
               ROI8_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_8";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI8;
        T& operator()() { return ROI8; }
        const T& operator()() const { return ROI8; }
      };
    };
  };
  namespace ROI9_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Phi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phi;
            T& operator()() { return phi; }
            const T& operator()() const { return phi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct XyDistLog10x1000
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xy_dist_log10x1000";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xyDistLog10x1000;
            T& operator()() { return xyDistLog10x1000; }
            const T& operator()() const { return xyDistLog10x1000; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct IsInferred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_inferred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isInferred;
            T& operator()() { return isInferred; }
            const T& operator()() const { return isInferred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct HasInteracted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_interacted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasInteracted;
            T& operator()() { return hasInteracted; }
            const T& operator()() const { return hasInteracted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROI9_

  struct ROI9: sqlpp::table_t<ROI9,
               ROI9_::Id,
               ROI9_::T,
               ROI9_::X,
               ROI9_::Y,
               ROI9_::W,
               ROI9_::H,
               ROI9_::Phi,
               ROI9_::XyDistLog10x1000,
               ROI9_::IsInferred,
               ROI9_::HasInteracted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_9";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROI9;
        T& operator()() { return ROI9; }
        const T& operator()() const { return ROI9; }
      };
    };
  };
  namespace ROIMAP_
  {
    struct RoiIdx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "roi_idx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T roiIdx;
            T& operator()() { return roiIdx; }
            const T& operator()() const { return roiIdx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct RoiValue
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "roi_value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T roiValue;
            T& operator()() { return roiValue; }
            const T& operator()() const { return roiValue; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct W
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "w";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T w;
            T& operator()() { return w; }
            const T& operator()() const { return w; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct H
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T h;
            T& operator()() { return h; }
            const T& operator()() const { return h; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace ROIMAP_

  struct ROIMAP: sqlpp::table_t<ROIMAP,
               ROIMAP_::RoiIdx,
               ROIMAP_::RoiValue,
               ROIMAP_::X,
               ROIMAP_::Y,
               ROIMAP_::W,
               ROIMAP_::H>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ROI_MAP";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ROIMAP;
        T& operator()() { return ROIMAP; }
        const T& operator()() const { return ROIMAP; }
      };
    };
  };
  namespace STARTEVENTS_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct T
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "t";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T t;
            T& operator()() { return t; }
            const T& operator()() const { return t; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Event
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "event";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T event;
            T& operator()() { return event; }
            const T& operator()() const { return event; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
    };
  } // namespace STARTEVENTS_

  struct STARTEVENTS: sqlpp::table_t<STARTEVENTS,
               STARTEVENTS_::Id,
               STARTEVENTS_::T,
               STARTEVENTS_::Event>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "START_EVENTS";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T STARTEVENTS;
        T& operator()() { return STARTEVENTS; }
        const T& operator()() const { return STARTEVENTS; }
      };
    };
  };
  namespace VARMAP_
  {
    struct VarName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "var_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T varName;
            T& operator()() { return varName; }
            const T& operator()() const { return varName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
    };
    struct SqlType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sql_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sqlType;
            T& operator()() { return sqlType; }
            const T& operator()() const { return sqlType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
    };
    struct FunctionalType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "functional_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T functionalType;
            T& operator()() { return functionalType; }
            const T& operator()() const { return functionalType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
    };
  } // namespace VARMAP_

  struct VARMAP: sqlpp::table_t<VARMAP,
               VARMAP_::VarName,
               VARMAP_::SqlType,
               VARMAP_::FunctionalType>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "VAR_MAP";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T VARMAP;
        T& operator()() { return VARMAP; }
        const T& operator()() const { return VARMAP; }
      };
    };
  };
} // namespace testtable
#endif
